_id is the default primary key 
every record in mongodb will have _id
_id is unique and cant be duplicated
object id is default _id if we dont specify some.


let port = process.env.PORT || 8210
as a developer, we only have the access of dev environment
same as environment variables in windows.
OR 
if environment port number is given, it will work through it and if it is not defined then, port will be work on default 8210



two types to set a route 
/ ?
/ - params , ? - Query Params
> app.get('/restaurant/:id',(req,res)  - id becomes the param (param should be defined here)
> db.restaurant.find({_id:"5"})
> db.restaurant.find({_id:"5", "cost":450})
> db.restaurant.find({"type.mealtype":"2"}) 

/*To find in a range */
> db.restaurant.find({$and:[{cost:{$gt:200, $lt:400}}]}) 
> db.restaurant.find({$and:[{cost:{$gt:200, $lt:400}}]}).sort({cost:1}) - For Ascending
> db.restaurant.find({$and:[{cost:{$gt:200, $lt:400}}]}).sort({cost:-1}) - For Descending

/*Projection */ - If i just need some specific data like only name and cost
> db.restaurant.find({condition}, {projection}).pretty()
> db.restaurant.find({}, {name:1,cost:1}).pretty() - if there is no condition and we need name and cost only. (But here, id will also be present)
> db.restaurant.find({}, {name:1,cost:,_id:0}).pretty() - for removing id
> db.restaurant.find({city:"1"}, {name:1,cost:,_id:0}).pretty() - for removing id



app.get('/restaurantdata/:id',(req,res) => {
    let restID = req.params.id;

app.get('/restaurantdata/:abcd',(req,res) => {
    let restID = req.params.abcd;


PARAM: - 
app.get('/restaurantdata/:id',(req,res) => {
    let restID = Number(req.params.id)
    console.log(">>>>restID" ,restID)
    db.collection('restaurantdata').find({state_id:restID}).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})


Query PARAM: - 
app.get('/restaurantdata',(req,res) => {
    let StateId = Number(req.query.state_id)
    let query = {};
    if (StateId){
        query = {state_id:StateId};
    }

    console.log(">>>>restID" ,StateId)
    db.collection('restaurantdata').find(query).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})



For Page 3: - 
We can use as Param, (becoz there id will be a little necessary)

/* Restaurant details (IN REFERENCE OF OBJECT ID)*/
app.get('/details/:id',(req,res) => {
    //let restID = Number(req.params.id)
    restID = mongo.ObjectId(req.params.id)
    db.collection('restaurantdata').find({_id:restID}).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})


QUERY WITH MORE CONDITIONS SHOULD COME FIRST

/* Cuisine Filter */
app.get('/filter/:mealId',(req,res) => {
    let mealId = Number(req.params.mealId)
    let cuisineId = Number(req.query.cuisine)
    let lcost = Number(req.query.lcost);
    let hcost = Number(req.query.hcost)
    let query = {}
    if(cuisineId&lcost&hcost) {
        query = {"cuisines.cuisine_id":cuisineId, "mealTypes.mealtype_id":mealId, $and:[{cost:{$gt:lcost, $lt:hcost}}]
    }
}
    else if(cuisineId){
        query = {"cuisines.cuisine_id":cuisineId,"mealTypes.mealtype_id":mealId}
    }
    else if(lcost&hcost){
        query = {$and:[{cost:{$gt:lcost, $lt:hcost}}],"mealTypes.mealtype_id":mealId}
    }
    db.collection('restaurantdata').find(query).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})

/* SORT */
app.get('/filter/:mealId',(req,res) => {
    let sort = {cost:1}
    # let mealId = Number(req.params.mealId)
    # let cuisineId = Number(req.query.cuisine)
    # let lcost = Number(req.query.lcost);
    # let hcost = Number(req.query.hcost)
    # let query = {}
    if(req.query.sort){
        sort = {cost:req.query.sort}
#     }
#     if(cuisineId&lcost&hcost) {
#         query = {"cuisines.cuisine_id":cuisineId, "mealTypes.mealtype_id":mealId, $and:[{cost:{$gt:lcost, $lt:hcost}}]
#     }
# }

#     else if(cuisineId){
#         query = {"cuisines.cuisine_id":cuisineId,"mealTypes.mealtype_id":mealId}
#     }

#     else if(lcost&hcost){
#         query = {$and:[{cost:{$gt:lcost, $lt:hcost}}],"mealTypes.mealtype_id":mealId}
#     }

    db.collection('restaurantdata').find(query).sort(sort).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})


/*SKIP & LIMIT*/
app.get('/filter/:mealId',(req,res) => {
    # let sort = {cost:1}
    # let mealId = Number(req.params.mealId)
    let skip = 0
    let limit = 1000000000;
    # let cuisineId = Number(req.query.cuisine)
    # let lcost = Number(req.query.lcost);
    # let hcost = Number(req.query.hcost)
    # let query = {}
    # if(req.query.sort){
    #     sort = {cost:req.query.sort}
    # }
    if(req.query.skip && req.query.limit){
        skip = Number(req.query.skip);
        limit = Number(req.query.limit)
#     }

#     if(cuisineId&lcost&hcost) {
#         query = {"cuisines.cuisine_id":cuisineId, "mealTypes.mealtype_id":mealId, $and:[{cost:{$gt:lcost, $lt:hcost}}]
#     }
# }

#     else if(cuisineId){
#         query = {"cuisines.cuisine_id":cuisineId,"mealTypes.mealtype_id":mealId}
#     }

#     else if(lcost&hcost){
#         query = {$and:[{cost:{$gt:lcost, $lt:hcost}}],"mealTypes.mealtype_id":mealId}
#     }

    db.collection('restaurantdata').find(query).sort(sort).skip(skip).limit(limit).toArray((err, result) =>{
        if(err) throw err;
        res.send(result)
    })
})


------------------------------------- TO MAKE SOME CHANGES IN BODY THEN, WE NEED TO INSTALL A PACKAGE NAMED (BODY PARSER)--------------------------------
WE HAVE DIFFERENT PORT NUMBERS IN FRONTEND AND BACKEND & IT IS A SECURITY BREACH, SO TO OVERCOME THAT WE USE (CORS)
------------------------------------- CORS (CROSS ORIGIN RESOURCE SHARING (I.E. TO ACEES THIS API FROM DIFFERENT ORIGIN)) -------------------------------

//For Usages
app.use(bodyParser.urlencoded({extended:true}))
app.use(bodyParser.json())
app.use(cors())

//Place Order (POST CALL)
/* FOR Verification */
app.post('/placeOrder', (req, res) => {
    console.log(req.body)
    res.send('ok')
})

/* Original Code */
app.post('/placeOrder', (req, res) => {
    //console.log(req.body)
    db.collection('order').insert(req.body, (err, result) =>{
        if(err) throw err;
        res.send('Order Added Successfully')
    })
})

//DELETE Order (POST CALL)

app.delete('/deleteOrder', (req, res) => {
    db.collection('order').remove({}, (err, result)  =>{
        if(err) throw err;
        res.send(result)
    })
})




/*UPDATE STATUS*/
default status = pending

app.put('/updateOrder/:id', (req, res) => {
    let oId = mongo.ObjectId(req.params.id)
    let status = req.query.status?req.query.status:'Pending'
    db.collection('order').updateOne(
        {_id: oId},
        {$set:{
            "status":status
        }}, (err, result) =>{
            if(err) throw err;
            res.send(`Status updated to ${status}`)
        })
})